- name: "Execute the generator"
  shell: /usr/local/bin/generator
  register: result
  # 如果 /usr/local/bin/generator 命令的返回值不是两行的话，就重新执行
  until: result.stdout_lines | length == 4
  retries: 5
  delay: 5

- debug:
    msg: "{{ result }} -> {{ result.stdout_lines | length }}"

- name: "sleep for 1 seconds and continue with play"
  wait_for:
    timeout: 1 

- name: "Get the secret key"
  set_fact:
    private_key: "{{ result.stdout_lines[0][2:] }}"
    public_key: "{{ result.stdout_lines[1][2:] }}"
    private_address: "{{ result.stdout_lines[2] }}"
    public_address: "{{ result.stdout_lines[3] }}"

- when: private_key | length == 64 and public_key | length == 128
  debug:
    msg: "
        {{ private_key }}
        {{ public_key }}
        {{ private_address }}
        {{ public_address }}
    "

- shell:
    cmd: |
         echo "{{ private_address }}" > /tmp/.node_address
         echo "{{ public_address }}" >> /tmp/.node_address

- set_fact:
    ident: "{{ ansible_host.split('.') | join('-') }}"

- name: "Create a configuration directory"
  file:
    state: directory
    path: "/opt/quorum-{{ ident }}/data/geth"

- name: "Create the node private key file"
  shell:
    creates: "/opt/quorum-{{ ident }}/data/geth/nodekey"
    cmd: "printf {{ private_key }} > /opt/quorum-{{ ident }}/data/geth/nodekey" 

- name: "Copy the raft genesis.json file"
  when: quorum.consensus == "raft"
  template:
    force: no 
    src: raft-genesis.json.j2 
    dest: "/opt/quorum-{{ ident }}/data/genesis.json"

- name: "Copy the istanbul genesis.json file"
  when: quorum.consensus == "istanbul"
  template:
    force: no 
    src: istanbul-genesis.json.j2
    dest: "/opt/quorum-{{ ident }}/data/genesis.json"

- name: "Copy the static-nodes.json file"
  template:
    force: no 
    src: static-nodes.json.j2
    dest: "/opt/quorum-{{ ident }}/data/static-nodes.json"

